
..  _RefWordFormattingDocTests:

Word formatting doctests
****************************************************************************

Word formatting for DNS v10 and earlier
============================================================================

The
:class:`dragonfly.engines.backend_natlink.dictation_format.WordParserDns10`
class converts DNS v10 (and earlier) recognition results to
:class:`dragonfly.engines.backend_natlink.dictation_format.Word`
objects which contain written and spoken forms together with formatting
information. For example::

    >>> from dragonfly.engines.backend_natlink.dictation_format import *
    >>> parser = WordParserDns10()
    >>> print parser.parse_input("hello")
    Word(u'hello')
    >>> print parser.parse_input(".\\full-stop")
    Word(u'.', u'full-stop', no_space_before, two_spaces_after, cap_next, not_after_period)

Nonexistent words can be parsed, but don't have any formatting info::

    >>> print parser.parse_input("nonexistent-word")
    Word(u'nonexistent-word')

This helper function allows for a compact notation of input string tests::

    >>> def format_dictation(input):
    ...     if isinstance(input, basestring):
    ...         input = input.split()
    ...     return WordFormatter().format_dictation(input)
    >>> format_dictation("hello world")
    u'hello world'

The following tests cover in-line capitalization::

    >>> format_dictation("\\All-Caps hello world")
    u'HELLO world'
    >>> format_dictation("\\Caps-On hello world")
    u'Hello World'
    >>> format_dictation("\\Caps-On hello of the world")
    u'Hello of the World'
    >>> format_dictation("hello \\Caps-On of the world")
    u'hello Of the World'
    >>> format_dictation("\\Caps-On hello world \\Caps-Off goodbye universe")
    u'Hello World goodbye universe'
    >>> format_dictation("hello \\All-Caps-On world goodbye \\All-Caps-Off universe")
    u'hello WORLD GOODBYE universe'
    >>> format_dictation("hello \\All-Caps-On world \\Caps-On goodbye universe")
    u'hello WORLD Goodbye Universe'
    >>> format_dictation("hello \\All-Caps-On world goodbye \\Caps-Off universe")
    u'hello WORLD GOODBYE universe'

The following tests cover punctuation and other symbols that influence
spacing and capitalization of surrounding words::

    >>> format_dictation("hello \\New-Line world")
    u'hello\nworld'
    >>> format_dictation("hello \\New-Paragraph world")
    u'hello\n\nWorld'
    >>> format_dictation("hello .\\full-stop world")
    u'hello. World'
    >>> format_dictation("hello ,\\comma world")
    u'hello, world'
    >>> format_dictation("hello .\\full-stop \\New-Line world")
    u'hello.\nWorld'
    >>> format_dictation("hello -\\hyphen world")
    u'hello-world'
    >>> format_dictation("hello (\\left-paren world")
    u'hello (world'
    >>> format_dictation("hello )\\right-paren world")
    u'hello) world'
    >>> format_dictation("hello \\\\backslash world")
    u'hello\\world'

The "." character at the end of certain words is "swallowed" by following
words that start with that same character::

    >>> format_dictation(["hello", "etc.\\et cetera", "world"])
    u'hello etc. world'
    >>> format_dictation(["hello", "etc.\\et cetera", ".\\full-stop", "world"])
    u'hello etc. World'
    >>> format_dictation(["hello", "etc.\\et cetera", "...\\ellipsis", "world"])
    u'hello etc... world'
    >>> # The following are different from some DNS installations!
    >>> format_dictation("hello .\\full-stop ...\\ellipsis world")
    u'hello... world'
    >>> format_dictation("hello ...\\ellipsis .\\full-stop world")
    u'hello... World'

Certain words, such as numbers, are not formatted according to the
same rules as "normal" words, i.e. those which specified written and spoken
forms and formatting info.

#    >>> format_dictation("one two three")
#    u'123'
